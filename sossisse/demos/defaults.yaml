########################################################################################################
##  Definition of inputs related to the data location and file naming
########################################################################################################
#
# Folder structure :
#  /YourPath/Your_SOSSISSE_folder/mode/object/rawdata/*.fits    -> that's where your input data should be
#  /YourPath/Your_SOSSISSE_folder/mode/calibrations/*.fits     -> that's where you put calibration files relevant for the mode
#  /YourPath/Your_SOSSISSE_folder/mode/object/temporary_*unique_id* /    -> that's where your temporary *FITS* files will be saved
#  /YourPath/Your_SOSSISSE_folder/mode/object/plots_*unique_id* / -> plots for that run
#  /YourPath/Your_SOSSISSE_folder/mode/object/csv_*unique_id* /-> csv files for that run
#
# *unique_id* will be a long random string constructed from the checksum of the config file
#
# sosspath *must* be defined as a system constant "sossiopath"
# Name of the object (must match the object directory name)
object: "required"
# Instrument mode i.e. SOSS or PRISM
mode: "required"
# A suffix to identify this setup (e.g. a specific visit)
suffix: "none"

# list of files to be processed
# in form:
# files:
# - file1
# - file2
# - file3
files: "required"

# CALIBRATION FILES -- these should be in the / general_path / mode / calibrations folder
#
# background file --> leave as '' if the is no backgorund available for the mode
bkgfile: ""
#
# flat field file --> leave as '' if there is no flat field available for the mode
flatfile: ""
#
# trace position file
pos_file: ""
#
# allow for temporary files to speed the process if you run the code more than once
allow_temporary: true
#
# Save results at the end
saveresults: true
#
# output(s) type of figure
figure_types:
- png
- pdf

########################################################################################################
##  User-related behavior
########################################################################################################

# if you want to see the plots at the end of the code, add your login here
# this should be the string as returned by "os.getlogin()"
user_show_plot:
- "dummy"

########################################################################################################
## Inputs related to the position within data cube timeseries
########################################################################################################
valid_dq:
- 0
- 2

# define the Nth frame for 1st contact [it1], 2nd contact [it2] ... through 4th contact

it:
- "Required"
- "Required"
- "Required"
- "Required"

# used to reject bits of domain from the analysis
# you can reject frames 0-600 with the values:
#
# reject domain:
# - 0
# - 600
#
# if you want to reject two bits of domain, 0-600 and 3000-3200
# just use
# reject domain:
# - 0
# - 600
# - 3000
# - 3200
#
# ... of course, you need an even number of values here.

# If PRISM data or saturated, you can perform a CDS between these two readouts
#cds_id:
#- 2
#- 0

########################################################################################################
## What do we fit in the linear model
########################################################################################################

# fit the dx -- along the dispersion
fit_dx: false

# fit the dy -- along the cross-dispersion
fit_dy: true

# fit the before - after morphological change
before_after: false

# fit the rotation in the linear reconstruction of the trace
fit_rotation: false

# fit the zero point offset in the linear model for the trace
zero_point_offset: true

# fit a flux^2 dependency. This is mostly meant as a *test* of the quality
# of the non-linearity correction. Normally this term should be decorrelated
# the the 'amplitude' term. Set to false for actual science analysis
# should not be used at the same time as the zero point offset
quadratic_term: false

# fit the 2nd derivative in y, good to find glitches!
ddy: true

fit_pca: false
n_pca: 2

time_bin: false
n_time_bin: 1 # we bin frames by this amount to speed everything in the computation

########################################################################################################
## Inputs related to handling of the data within each frame
########################################################################################################

pixel_level_detrending: false

trace_orders:
- 1

# wavelength domain for the write light curve
#wlc domain:
#- 1.2
#- 1.6

# median of out-of-transit values for reference trace construction. if set to false,
# then we have the median of the entire timeserie
ootmed: true

x_trace_offset: 0

y_trace_offset: 0

mask_order_0: true

recenter_trace_position: true

# out of transit polynomial level correction
transit_baseline_polyord: 2

# out-of-trace
trace_baseline_polyord: 2

# degree of the polynomial for the 1/f correction
# degree_1f_corr = 0 -> just a constant through the 256 pix spatial
# degree_1f_corr = 1 -> slope ... and so on
degree_1f_corr: 0

# set trace_width_masking to 0 to use the full image
# use in SOSSICE
trace_width_extraction: 40

# used for masking and WLC
trace_width_masking: 40

# do remove trend from out-of-transit
remove_trend: true

# define how the "white" transit depth is computed/assigned
#   "compute": Compute transit depth using median OOT relative flux from WLC, and mean in-transit relative flux from WLC
#   OR
#   provide a number: if "white" tdepth is known (from fitting the WLC for example), one can provide the number he
tdepth: "compute"

resolution_bin: 20

spectrum_ylim_ppm:
- 6000
- 12000


soss_background_glitch_box:
- 650 # x start of the aread around which we will optimize the background position of the glitch
- 750 # x end of the aread around which we will optimize the background position of the glitch
- 200 # y start of the aread around which we will optimize the background position of the glitch
- 240 # y end of the aread around which we will optimize the background position of the glitch